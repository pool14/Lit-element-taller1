export class Route {
    constructor(path, component, exact) {
        this.path = path;
        this.component = component;
        this.exact = exact;
        Store.addRoute(this);
    }
    match() {
        return matchPath(location.pathname, { path: this.path, exact: this.exact });
    }
    mount() {
        const match = this.match();
        return !!match ? this.component(match) : null;
    }
}
export class DefaultRoute {
    constructor(component) {
        this.component = component;
    }
    mount() {
        return !Store.routeExists() ? this.component() : null;
    }
}
export function PrivateRoute(path, auth, privateComponent, fallbackComponentOrRoute, exact) {
    if (!auth) {
        if (fallbackComponentOrRoute instanceof Function) {
            return new Route(path, fallbackComponentOrRoute, exact).mount();
        }
        else {
            Redirect(fallbackComponentOrRoute);
        }
    }
    else {
        return new Route(path, privateComponent, exact).mount();
    }
}
export function Redirect(redirectPath, reRender) {
    history.pushState(null, '', redirectPath);
    if (reRender) {
        reRender();
    }
}
export class Router {
    constructor(render, appRoot) {
        this.render = render;
        this.appRoot = appRoot;
        window.onpopstate = () => {
            this.render();
            this.updateCurrentLinks();
        };
    }
    forEachNode(array, callback, scope) {
        for (var i = 0; i < array.length; i++) {
            callback.call(scope, i, array[i]);
        }
    }
    init() {
        this.render();
        this.appRoot.addEventListener('click', (e) => {
            if (e.target instanceof HTMLElement) {
                let parent = e.target;
                do {
                    if (parent.className && (parent.className.indexOf('lit-route-link') > -1)) {
                        let path = parent.getAttribute('data-to') || "";
                        this.reRender(path);
                        break;
                    }
                    parent = parent.parentElement;
                } while (parent);
            }
        });
        this.updateCurrentLinks();
    }
    reRender(path) {
        history.pushState(null, '', path);
        this.render();
        this.updateCurrentLinks();
    }
    updateCurrentLinks() {
        let itemList = document.querySelectorAll("a.lit-route-link");
        this.forEachNode(itemList, (index) => {
            let path = itemList[index].getAttribute('data-to') || "";
            if (!!matchPath(location.pathname, { path: path, exact: false })) {
                itemList[index].classList.add("current");
            }
            else {
                itemList[index].classList.remove("current");
            }
        });
    }
}
export function matchPath(pathname, options) {
    const { exact = false, path } = options;
    if (!path) {
        return {
            path: null,
            url: pathname,
            isExact: true,
            params: {}
        };
    }
    const match = new RegExp(`^\/${pathWithoutParameters(path)}`).exec(pathname);
    if (!match) {
        return null;
    }
    const url = match[0];
    const isExact = url === pathname;
    if (exact && !isExact) {
        return null;
    }
    var params = returnParameters(path);
    return {
        path,
        url,
        isExact,
        params
    };
}
function returnParameters(path) {
    const paramNames = path.split('/');
    const paramValues = location.pathname.split('/');
    const params = {};
    paramNames.forEach((name, index) => {
        if (name.toString().indexOf(':') > -1) {
            params[name.toString().substr(1)] = paramValues[index];
        }
    });
    return params;
}
function pathWithoutParameters(path) {
    const pathArray = path.split('/');
    var firstParamIndex = pathArray.length;
    for (let i = 0; i < pathArray.length; i++) {
        if (pathArray[i].indexOf(':') > -1) {
            firstParamIndex = i;
            break;
        }
    }
    return pathArray.slice(1, firstParamIndex).join('/');
}
class RouteStore {
    constructor() {
        this.routes = [];
    }
    addRoute(route) {
        this.routes.push(route);
    }
    routeExists() {
        return this.routes.some((route) => route.match() !== null);
    }
}
const Store = new RouteStore();
//# sourceMappingURL=index.js.map